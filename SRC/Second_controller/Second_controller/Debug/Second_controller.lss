
Second_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009c2  00000a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000a58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c6  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000898  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7f  00000000  00000000  0000252a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00002fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000569  00000000  00000000  000031e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d1a  00000000  00000000  00003749  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 df 04 	jmp	0x9be	; 0x9be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "STD_TYPES.h"
#define  F_CPU 16000000UL
#include "util/delay.h"

int main(void){
    ULTRA_SONIC_INIT_1();
  92:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ULTRA_SONIC_INIT_1>
    BUZZER_INIT(BUZZER_0);
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 7d 00 	call	0xfa	; 0xfa <BUZZER_INIT>
    u16 reading_1;
    while(1){
        reading_1 = MEASURE_DISTANCE_1();
  9c:	0e 94 09 01 	call	0x212	; 0x212 <MEASURE_DISTANCE_1>
        if(reading_1 < 5){
  a0:	85 30       	cpi	r24, 0x05	; 5
  a2:	91 05       	cpc	r25, r1
  a4:	20 f4       	brcc	.+8      	; 0xae <main+0x1c>
            BUZZER_NEAR_1(BUZZER_0);
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	0e 94 89 00 	call	0x112	; 0x112 <BUZZER_NEAR_1>
  ac:	f7 cf       	rjmp	.-18     	; 0x9c <main+0xa>
        }else if(reading_1 < 10){
  ae:	8a 30       	cpi	r24, 0x0A	; 10
  b0:	91 05       	cpc	r25, r1
  b2:	20 f4       	brcc	.+8      	; 0xbc <main+0x2a>
            BUZZER_NEAR_2(BUZZER_0);
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 9b 00 	call	0x136	; 0x136 <BUZZER_NEAR_2>
  ba:	f0 cf       	rjmp	.-32     	; 0x9c <main+0xa>
        }else if(reading_1 < 15){
  bc:	8f 30       	cpi	r24, 0x0F	; 15
  be:	91 05       	cpc	r25, r1
  c0:	20 f4       	brcc	.+8      	; 0xca <main+0x38>
            BUZZER_INTERMEDIATE_1(BUZZER_0);
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	0e 94 ad 00 	call	0x15a	; 0x15a <BUZZER_INTERMEDIATE_1>
  c8:	e9 cf       	rjmp	.-46     	; 0x9c <main+0xa>
        }else if(reading_1 < 20){
  ca:	84 31       	cpi	r24, 0x14	; 20
  cc:	91 05       	cpc	r25, r1
  ce:	20 f4       	brcc	.+8      	; 0xd8 <main+0x46>
            BUZZER_INTERMEDIATE_2(BUZZER_0);
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	0e 94 bf 00 	call	0x17e	; 0x17e <BUZZER_INTERMEDIATE_2>
  d6:	e2 cf       	rjmp	.-60     	; 0x9c <main+0xa>
        }else if(reading_1 < 25){
  d8:	89 31       	cpi	r24, 0x19	; 25
  da:	91 05       	cpc	r25, r1
  dc:	20 f4       	brcc	.+8      	; 0xe6 <main+0x54>
            BUZZER_FAR_1(BUZZER_0);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <BUZZER_FAR_1>
  e4:	db cf       	rjmp	.-74     	; 0x9c <main+0xa>
        }else if(reading_1 < 30){
  e6:	4e 97       	sbiw	r24, 0x1e	; 30
  e8:	20 f4       	brcc	.+8      	; 0xf2 <main+0x60>
            BUZZER_FAR_2(BUZZER_0);
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <BUZZER_FAR_2>
  f0:	d5 cf       	rjmp	.-86     	; 0x9c <main+0xa>
        }else{
            BUZZER_OFF(BUZZER_0);
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	0e 94 85 00 	call	0x10a	; 0x10a <BUZZER_OFF>
  f8:	d1 cf       	rjmp	.-94     	; 0x9c <main+0xa>

000000fa <BUZZER_INIT>:
#define F_CPU 16000000
#include "util/delay.h"
#include "DIO.h"

void BUZZER_INIT(u8 buzzer_no){
	PIN_MODE(buzzer_no,OUTPUT);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	0e 94 ac 01 	call	0x358	; 0x358 <PIN_MODE>
 100:	08 95       	ret

00000102 <BUZZER_ON>:
}

void BUZZER_ON(u8 buzzer_no){
	PIN_WRITE(buzzer_no,HIGH);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	0e 94 38 02 	call	0x470	; 0x470 <PIN_WRITE>
 108:	08 95       	ret

0000010a <BUZZER_OFF>:
}

void BUZZER_OFF(u8 buzzer_no){
	PIN_WRITE(buzzer_no,LOW);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	0e 94 38 02 	call	0x470	; 0x470 <PIN_WRITE>
 110:	08 95       	ret

00000112 <BUZZER_NEAR_1>:
}

void BUZZER_NEAR_1(u8 buzzer_no){
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
	BUZZER_ON(buzzer_no);
 116:	0e 94 81 00 	call	0x102	; 0x102 <BUZZER_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <BUZZER_NEAR_1+0xe>
 128:	00 c0       	rjmp	.+0      	; 0x12a <BUZZER_NEAR_1+0x18>
 12a:	00 00       	nop
	_delay_ms(100);
	BUZZER_OFF(buzzer_no);
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 85 00 	call	0x10a	; 0x10a <BUZZER_OFF>
}
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <BUZZER_NEAR_2>:

void BUZZER_NEAR_2(u8 buzzer_no){
 136:	cf 93       	push	r28
 138:	c8 2f       	mov	r28, r24
    BUZZER_ON(buzzer_no);
 13a:	0e 94 81 00 	call	0x102	; 0x102 <BUZZER_ON>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	83 ec       	ldi	r24, 0xC3	; 195
 142:	99 e0       	ldi	r25, 0x09	; 9
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <BUZZER_NEAR_2+0xe>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <BUZZER_NEAR_2+0x18>
 14e:	00 00       	nop
    _delay_ms(200);
    BUZZER_OFF(buzzer_no);
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 85 00 	call	0x10a	; 0x10a <BUZZER_OFF>
}
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <BUZZER_INTERMEDIATE_1>:

void BUZZER_INTERMEDIATE_1(u8 buzzer_no){
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
    BUZZER_ON(buzzer_no);
 15e:	0e 94 81 00 	call	0x102	; 0x102 <BUZZER_ON>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	85 ea       	ldi	r24, 0xA5	; 165
 166:	9e e0       	ldi	r25, 0x0E	; 14
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <BUZZER_INTERMEDIATE_1+0xe>
 170:	00 c0       	rjmp	.+0      	; 0x172 <BUZZER_INTERMEDIATE_1+0x18>
 172:	00 00       	nop
    _delay_ms(300);
    BUZZER_OFF(buzzer_no);
 174:	8c 2f       	mov	r24, r28
 176:	0e 94 85 00 	call	0x10a	; 0x10a <BUZZER_OFF>
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <BUZZER_INTERMEDIATE_2>:

void BUZZER_INTERMEDIATE_2(u8 buzzer_no){
 17e:	cf 93       	push	r28
 180:	c8 2f       	mov	r28, r24
    BUZZER_ON(buzzer_no);
 182:	0e 94 81 00 	call	0x102	; 0x102 <BUZZER_ON>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	87 e8       	ldi	r24, 0x87	; 135
 18a:	93 e1       	ldi	r25, 0x13	; 19
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <BUZZER_INTERMEDIATE_2+0xe>
 194:	00 c0       	rjmp	.+0      	; 0x196 <BUZZER_INTERMEDIATE_2+0x18>
 196:	00 00       	nop
    _delay_ms(400);
    BUZZER_OFF(buzzer_no);
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 85 00 	call	0x10a	; 0x10a <BUZZER_OFF>
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <BUZZER_FAR_1>:

void BUZZER_FAR_1(u8 buzzer_no){
 1a2:	cf 93       	push	r28
 1a4:	c8 2f       	mov	r28, r24
    BUZZER_ON(buzzer_no);
 1a6:	0e 94 81 00 	call	0x102	; 0x102 <BUZZER_ON>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	89 e6       	ldi	r24, 0x69	; 105
 1ae:	98 e1       	ldi	r25, 0x18	; 24
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <BUZZER_FAR_1+0xe>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <BUZZER_FAR_1+0x18>
 1ba:	00 00       	nop
    _delay_ms(500);
    BUZZER_OFF(buzzer_no);
 1bc:	8c 2f       	mov	r24, r28
 1be:	0e 94 85 00 	call	0x10a	; 0x10a <BUZZER_OFF>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <BUZZER_FAR_2>:

void BUZZER_FAR_2(u8 buzzer_no){
 1c6:	cf 93       	push	r28
 1c8:	c8 2f       	mov	r28, r24
    BUZZER_ON(buzzer_no);
 1ca:	0e 94 81 00 	call	0x102	; 0x102 <BUZZER_ON>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	8b e4       	ldi	r24, 0x4B	; 75
 1d2:	9d e1       	ldi	r25, 0x1D	; 29
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <BUZZER_FAR_2+0xe>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <BUZZER_FAR_2+0x18>
 1de:	00 00       	nop
    _delay_ms(600);
    BUZZER_OFF(buzzer_no);
 1e0:	8c 2f       	mov	r24, r28
 1e2:	0e 94 85 00 	call	0x10a	; 0x10a <BUZZER_OFF>
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <ULTRA_SONIC_INIT_1>:
u16 timer_overflow_1 = 0;


void ULTRA_SONIC_INIT_1(void){
    //ENABLE GLOBALE INTERUPT
    SET_BIT(SREG,7);
 1ea:	8f b7       	in	r24, 0x3f	; 63
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	8f bf       	out	0x3f, r24	; 63
    //TIMER0 OVERFLOW
    SET_BIT(TIMSK,0);
 1f0:	89 b7       	in	r24, 0x39	; 57
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	89 bf       	out	0x39, r24	; 57
    //PIN MODE FOR TRIGGER
    PIN_MODE(TRIGGER_PIN_1,OUTPUT);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	84 e1       	ldi	r24, 0x14	; 20
 1fa:	0e 94 ac 01 	call	0x358	; 0x358 <PIN_MODE>
    //PIN MODE FOR ECHO
    PIN_MODE(ECHO_PIN_1,INPUT);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	85 e1       	ldi	r24, 0x15	; 21
 202:	0e 94 ac 01 	call	0x358	; 0x358 <PIN_MODE>
    //NORMAL OPERATION FOR ALL
    TCCR0 = 0;
 206:	13 be       	out	0x33, r1	; 51
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	84 e1       	ldi	r24, 0x14	; 20
 20c:	0e 94 38 02 	call	0x470	; 0x470 <PIN_WRITE>
 210:	08 95       	ret

00000212 <MEASURE_DISTANCE_1>:
}

u16 MEASURE_DISTANCE_1(void){
 212:	4f 92       	push	r4
 214:	5f 92       	push	r5
 216:	6f 92       	push	r6
 218:	7f 92       	push	r7
 21a:	8f 92       	push	r8
 21c:	9f 92       	push	r9
 21e:	af 92       	push	r10
 220:	bf 92       	push	r11
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
    u8 entered=0;
    u8 done=0;
    u64 time_taken;
    u32 distance;
    //SEND A ECHO
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	84 e1       	ldi	r24, 0x14	; 20
 236:	0e 94 38 02 	call	0x470	; 0x470 <PIN_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	85 e3       	ldi	r24, 0x35	; 53
 23c:	8a 95       	dec	r24
 23e:	f1 f7       	brne	.-4      	; 0x23c <MEASURE_DISTANCE_1+0x2a>
 240:	00 00       	nop
    _delay_us(10);
    PIN_WRITE(TRIGGER_PIN_1,LOW);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	84 e1       	ldi	r24, 0x14	; 20
 246:	0e 94 38 02 	call	0x470	; 0x470 <PIN_WRITE>
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
}

u16 MEASURE_DISTANCE_1(void){
    u8 entered=0;
    u8 done=0;
 24a:	c0 e0       	ldi	r28, 0x00	; 0
    TCCR0 = 0;
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
}

u16 MEASURE_DISTANCE_1(void){
    u8 entered=0;
 24c:	d0 e0       	ldi	r29, 0x00	; 0
    u32 distance;
    //SEND A ECHO
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
    _delay_us(10);
    PIN_WRITE(TRIGGER_PIN_1,LOW);
    while(done != 1){
 24e:	2e c0       	rjmp	.+92     	; 0x2ac <MEASURE_DISTANCE_1+0x9a>
        switch(PIN_READ(ECHO_PIN_1)){
 250:	85 e1       	ldi	r24, 0x15	; 21
 252:	0e 94 c4 02 	call	0x588	; 0x588 <PIN_READ>
 256:	88 23       	and	r24, r24
 258:	19 f0       	breq	.+6      	; 0x260 <MEASURE_DISTANCE_1+0x4e>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	d9 f0       	breq	.+54     	; 0x294 <MEASURE_DISTANCE_1+0x82>
 25e:	26 c0       	rjmp	.+76     	; 0x2ac <MEASURE_DISTANCE_1+0x9a>
            case 0:
            switch(entered){
 260:	d1 30       	cpi	r29, 0x01	; 1
 262:	21 f5       	brne	.+72     	; 0x2ac <MEASURE_DISTANCE_1+0x9a>
                case 0:
                continue;
                break;
                case 1:
                //TIMER STOP
                CLR_BIT(TCCR0,0);
 264:	83 b7       	in	r24, 0x33	; 51
 266:	8e 7f       	andi	r24, 0xFE	; 254
 268:	83 bf       	out	0x33, r24	; 51
                CLR_BIT(TCCR0,1);
 26a:	83 b7       	in	r24, 0x33	; 51
 26c:	8d 7f       	andi	r24, 0xFD	; 253
 26e:	83 bf       	out	0x33, r24	; 51
                CLR_BIT(TCCR0,2);
 270:	83 b7       	in	r24, 0x33	; 51
 272:	8b 7f       	andi	r24, 0xFB	; 251
 274:	83 bf       	out	0x33, r24	; 51
                time_taken = (timer_overflow_1*256) + TCNT0;
 276:	10 91 62 00 	lds	r17, 0x0062	; 0x800062 <__data_end>
 27a:	00 e0       	ldi	r16, 0x00	; 0
 27c:	82 b7       	in	r24, 0x32	; 50
 27e:	28 01       	movw	r4, r16
 280:	48 0e       	add	r4, r24
 282:	51 1c       	adc	r5, r1
 284:	61 2c       	mov	r6, r1
 286:	71 2c       	mov	r7, r1
 288:	81 2c       	mov	r8, r1
 28a:	91 2c       	mov	r9, r1
 28c:	54 01       	movw	r10, r8
                entered=0;
                done=1;
 28e:	c1 e0       	ldi	r28, 0x01	; 1
                //TIMER STOP
                CLR_BIT(TCCR0,0);
                CLR_BIT(TCCR0,1);
                CLR_BIT(TCCR0,2);
                time_taken = (timer_overflow_1*256) + TCNT0;
                entered=0;
 290:	d0 e0       	ldi	r29, 0x00	; 0
                done=1;
                break;
 292:	0c c0       	rjmp	.+24     	; 0x2ac <MEASURE_DISTANCE_1+0x9a>
            }
            break;
            case 1:
            switch(entered){
 294:	d1 11       	cpse	r29, r1
 296:	0a c0       	rjmp	.+20     	; 0x2ac <MEASURE_DISTANCE_1+0x9a>
                case 0:
                //8 PRE SCALLER
                CLR_BIT(TCCR0,0);
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	83 bf       	out	0x33, r24	; 51
                SET_BIT(TCCR0,1);
 29e:	83 b7       	in	r24, 0x33	; 51
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	83 bf       	out	0x33, r24	; 51
                CLR_BIT(TCCR0,2);
 2a4:	83 b7       	in	r24, 0x33	; 51
 2a6:	8b 7f       	andi	r24, 0xFB	; 251
 2a8:	83 bf       	out	0x33, r24	; 51
                entered=1;
 2aa:	d1 e0       	ldi	r29, 0x01	; 1
    u32 distance;
    //SEND A ECHO
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
    _delay_us(10);
    PIN_WRITE(TRIGGER_PIN_1,LOW);
    while(done != 1){
 2ac:	c1 30       	cpi	r28, 0x01	; 1
 2ae:	81 f6       	brne	.-96     	; 0x250 <MEASURE_DISTANCE_1+0x3e>
            }
            break;
        }
    }
    //RESET TIMER
    timer_overflow_1 = 0;
 2b0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 2b4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
    TCNT0 = 0;
 2b8:	12 be       	out	0x32, r1	; 50
    distance = (time_taken * (SOUND_SPEED/(float)2000000))/2;//distance in cm is returned || DIVIDE BY TWO BECAUSE EVERY OSCILATION INCREASE TWO TICKS
 2ba:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <SOUND_SPEED>
 2be:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <SOUND_SPEED+0x1>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 a6 03 	call	0x74c	; 0x74c <__floatunsisf>
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	34 e2       	ldi	r19, 0x24	; 36
 2ce:	44 ef       	ldi	r20, 0xF4	; 244
 2d0:	59 e4       	ldi	r21, 0x49	; 73
 2d2:	0e 94 05 03 	call	0x60a	; 0x60a <__divsf3>
 2d6:	6b 01       	movw	r12, r22
 2d8:	7c 01       	movw	r14, r24
 2da:	24 2d       	mov	r18, r4
 2dc:	35 2d       	mov	r19, r5
 2de:	46 2d       	mov	r20, r6
 2e0:	57 2d       	mov	r21, r7
 2e2:	68 2d       	mov	r22, r8
 2e4:	79 2d       	mov	r23, r9
 2e6:	8a 2d       	mov	r24, r10
 2e8:	9b 2d       	mov	r25, r11
 2ea:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__floatundisf>
 2ee:	a7 01       	movw	r20, r14
 2f0:	96 01       	movw	r18, r12
 2f2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__mulsf3>
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	5f e3       	ldi	r21, 0x3F	; 63
 2fe:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__mulsf3>
 302:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fixunssfsi>
    return distance;
}
 306:	cb 01       	movw	r24, r22
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	df 90       	pop	r13
 316:	cf 90       	pop	r12
 318:	bf 90       	pop	r11
 31a:	af 90       	pop	r10
 31c:	9f 90       	pop	r9
 31e:	8f 90       	pop	r8
 320:	7f 90       	pop	r7
 322:	6f 90       	pop	r6
 324:	5f 90       	pop	r5
 326:	4f 90       	pop	r4
 328:	08 95       	ret

0000032a <__vector_11>:

ISR(TIMER0_OVF_vect){
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
    timer_overflow_1++;
 338:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 33c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 346:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <PIN_MODE>:
#include "DIO.h"
#include "REG.h"
#include "BIT_MATH.h"

void PIN_MODE(u8 x,u8 state){
	u8 pin  = x % 10;
 358:	9d ec       	ldi	r25, 0xCD	; 205
 35a:	89 9f       	mul	r24, r25
 35c:	91 2d       	mov	r25, r1
 35e:	11 24       	eor	r1, r1
 360:	29 2f       	mov	r18, r25
 362:	26 95       	lsr	r18
 364:	26 95       	lsr	r18
 366:	26 95       	lsr	r18
 368:	22 0f       	add	r18, r18
 36a:	32 2f       	mov	r19, r18
 36c:	33 0f       	add	r19, r19
 36e:	33 0f       	add	r19, r19
 370:	23 0f       	add	r18, r19
 372:	82 1b       	sub	r24, r18
 374:	28 2f       	mov	r18, r24
	u8 port = x / 10;
 376:	89 2f       	mov	r24, r25
 378:	86 95       	lsr	r24
 37a:	86 95       	lsr	r24
 37c:	86 95       	lsr	r24
	switch(port){
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	19 f1       	breq	.+70     	; 0x3c8 <PIN_MODE+0x70>
 382:	30 f0       	brcs	.+12     	; 0x390 <PIN_MODE+0x38>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	e1 f1       	breq	.+120    	; 0x400 <__EEPROM_REGION_LENGTH__>
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	09 f4       	brne	.+2      	; 0x38e <PIN_MODE+0x36>
 38c:	55 c0       	rjmp	.+170    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 38e:	08 95       	ret
		case 0:
		switch(state){
 390:	66 23       	and	r22, r22
 392:	19 f0       	breq	.+6      	; 0x39a <PIN_MODE+0x42>
 394:	61 30       	cpi	r22, 0x01	; 1
 396:	69 f0       	breq	.+26     	; 0x3b2 <PIN_MODE+0x5a>
 398:	08 95       	ret
			case INPUT:
			CLR_BIT(DDRA,pin);
 39a:	3a b3       	in	r19, 0x1a	; 26
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <PIN_MODE+0x4e>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	2a 95       	dec	r18
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <PIN_MODE+0x4a>
 3aa:	80 95       	com	r24
 3ac:	83 23       	and	r24, r19
 3ae:	8a bb       	out	0x1a, r24	; 26
			break;
 3b0:	08 95       	ret
			case OUTPUT:
			SET_BIT(DDRA,pin);
 3b2:	3a b3       	in	r19, 0x1a	; 26
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <PIN_MODE+0x66>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	2a 95       	dec	r18
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <PIN_MODE+0x62>
 3c2:	83 2b       	or	r24, r19
 3c4:	8a bb       	out	0x1a, r24	; 26
			break;
 3c6:	08 95       	ret
			default:
			break;
		}
		break;
		case 1:
		switch(state){
 3c8:	66 23       	and	r22, r22
 3ca:	19 f0       	breq	.+6      	; 0x3d2 <PIN_MODE+0x7a>
 3cc:	61 30       	cpi	r22, 0x01	; 1
 3ce:	69 f0       	breq	.+26     	; 0x3ea <PIN_MODE+0x92>
 3d0:	08 95       	ret
			case INPUT:
			CLR_BIT(DDRB,pin);
 3d2:	37 b3       	in	r19, 0x17	; 23
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <PIN_MODE+0x86>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	2a 95       	dec	r18
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <PIN_MODE+0x82>
 3e2:	80 95       	com	r24
 3e4:	83 23       	and	r24, r19
 3e6:	87 bb       	out	0x17, r24	; 23
			break;
 3e8:	08 95       	ret
			case OUTPUT:
			SET_BIT(DDRB,pin);
 3ea:	37 b3       	in	r19, 0x17	; 23
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <PIN_MODE+0x9e>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	2a 95       	dec	r18
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <PIN_MODE+0x9a>
 3fa:	83 2b       	or	r24, r19
 3fc:	87 bb       	out	0x17, r24	; 23
			break;
 3fe:	08 95       	ret
			default:
			break;
		}
		break;
		case 2:
		switch(state){
 400:	66 23       	and	r22, r22
 402:	19 f0       	breq	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 404:	61 30       	cpi	r22, 0x01	; 1
 406:	69 f0       	breq	.+26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 408:	08 95       	ret
			case INPUT:
			CLR_BIT(DDRC,pin);
 40a:	34 b3       	in	r19, 0x14	; 20
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	2a 95       	dec	r18
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	80 95       	com	r24
 41c:	83 23       	and	r24, r19
 41e:	84 bb       	out	0x14, r24	; 20
			break;
 420:	08 95       	ret
			case OUTPUT:
			SET_BIT(DDRC,pin);
 422:	34 b3       	in	r19, 0x14	; 20
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	2a 95       	dec	r18
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	83 2b       	or	r24, r19
 434:	84 bb       	out	0x14, r24	; 20
			break;
 436:	08 95       	ret
			default:
			break;
		}
		break;
		case 3:
		switch(state){
 438:	66 23       	and	r22, r22
 43a:	19 f0       	breq	.+6      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43c:	61 30       	cpi	r22, 0x01	; 1
 43e:	69 f0       	breq	.+26     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 440:	08 95       	ret
			case INPUT:
			CLR_BIT(DDRD,pin);
 442:	31 b3       	in	r19, 0x11	; 17
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	2a 95       	dec	r18
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	80 95       	com	r24
 454:	83 23       	and	r24, r19
 456:	81 bb       	out	0x11, r24	; 17
			break;
 458:	08 95       	ret
			case OUTPUT:
			SET_BIT(DDRD,pin);
 45a:	31 b3       	in	r19, 0x11	; 17
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	2a 95       	dec	r18
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	83 2b       	or	r24, r19
 46c:	81 bb       	out	0x11, r24	; 17
 46e:	08 95       	ret

00000470 <PIN_WRITE>:
		default:
		break;
	}
}
void PIN_WRITE(u8 x,u8 state){
	u8 pin  = x % 10;
 470:	9d ec       	ldi	r25, 0xCD	; 205
 472:	89 9f       	mul	r24, r25
 474:	91 2d       	mov	r25, r1
 476:	11 24       	eor	r1, r1
 478:	29 2f       	mov	r18, r25
 47a:	26 95       	lsr	r18
 47c:	26 95       	lsr	r18
 47e:	26 95       	lsr	r18
 480:	22 0f       	add	r18, r18
 482:	32 2f       	mov	r19, r18
 484:	33 0f       	add	r19, r19
 486:	33 0f       	add	r19, r19
 488:	23 0f       	add	r18, r19
 48a:	82 1b       	sub	r24, r18
 48c:	28 2f       	mov	r18, r24
	u8 port = x / 10;
 48e:	89 2f       	mov	r24, r25
 490:	86 95       	lsr	r24
 492:	86 95       	lsr	r24
 494:	86 95       	lsr	r24
	switch(port){
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	19 f1       	breq	.+70     	; 0x4e0 <PIN_WRITE+0x70>
 49a:	30 f0       	brcs	.+12     	; 0x4a8 <PIN_WRITE+0x38>
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	e1 f1       	breq	.+120    	; 0x518 <PIN_WRITE+0xa8>
 4a0:	83 30       	cpi	r24, 0x03	; 3
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <PIN_WRITE+0x36>
 4a4:	55 c0       	rjmp	.+170    	; 0x550 <PIN_WRITE+0xe0>
 4a6:	08 95       	ret
		case 0:
		switch(state){
 4a8:	66 23       	and	r22, r22
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <PIN_WRITE+0x42>
 4ac:	61 30       	cpi	r22, 0x01	; 1
 4ae:	69 f0       	breq	.+26     	; 0x4ca <PIN_WRITE+0x5a>
 4b0:	08 95       	ret
			case LOW:
			CLR_BIT(PORTA,pin);
 4b2:	3b b3       	in	r19, 0x1b	; 27
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <PIN_WRITE+0x4e>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	2a 95       	dec	r18
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <PIN_WRITE+0x4a>
 4c2:	80 95       	com	r24
 4c4:	83 23       	and	r24, r19
 4c6:	8b bb       	out	0x1b, r24	; 27
			break;
 4c8:	08 95       	ret
			case HIGH:
			SET_BIT(PORTA,pin);
 4ca:	3b b3       	in	r19, 0x1b	; 27
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <PIN_WRITE+0x66>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	2a 95       	dec	r18
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <PIN_WRITE+0x62>
 4da:	83 2b       	or	r24, r19
 4dc:	8b bb       	out	0x1b, r24	; 27
			break;
 4de:	08 95       	ret
			default:
			break;
		}
		break;
		case 1:
		switch(state){
 4e0:	66 23       	and	r22, r22
 4e2:	19 f0       	breq	.+6      	; 0x4ea <PIN_WRITE+0x7a>
 4e4:	61 30       	cpi	r22, 0x01	; 1
 4e6:	69 f0       	breq	.+26     	; 0x502 <PIN_WRITE+0x92>
 4e8:	08 95       	ret
			case LOW:
			CLR_BIT(PORTB,pin);
 4ea:	38 b3       	in	r19, 0x18	; 24
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <PIN_WRITE+0x86>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	2a 95       	dec	r18
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <PIN_WRITE+0x82>
 4fa:	80 95       	com	r24
 4fc:	83 23       	and	r24, r19
 4fe:	88 bb       	out	0x18, r24	; 24
			break;
 500:	08 95       	ret
			case HIGH:
			SET_BIT(PORTB,pin);
 502:	38 b3       	in	r19, 0x18	; 24
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <PIN_WRITE+0x9e>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	2a 95       	dec	r18
 510:	e2 f7       	brpl	.-8      	; 0x50a <PIN_WRITE+0x9a>
 512:	83 2b       	or	r24, r19
 514:	88 bb       	out	0x18, r24	; 24
			break;
 516:	08 95       	ret
			default:
			break;
		}
		break;
		case 2:
		switch(state){
 518:	66 23       	and	r22, r22
 51a:	19 f0       	breq	.+6      	; 0x522 <PIN_WRITE+0xb2>
 51c:	61 30       	cpi	r22, 0x01	; 1
 51e:	69 f0       	breq	.+26     	; 0x53a <PIN_WRITE+0xca>
 520:	08 95       	ret
			case LOW:
			CLR_BIT(PORTC,pin);
 522:	35 b3       	in	r19, 0x15	; 21
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <PIN_WRITE+0xbe>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	2a 95       	dec	r18
 530:	e2 f7       	brpl	.-8      	; 0x52a <PIN_WRITE+0xba>
 532:	80 95       	com	r24
 534:	83 23       	and	r24, r19
 536:	85 bb       	out	0x15, r24	; 21
			break;
 538:	08 95       	ret
			case HIGH:
			SET_BIT(PORTC,pin);
 53a:	35 b3       	in	r19, 0x15	; 21
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <PIN_WRITE+0xd6>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	2a 95       	dec	r18
 548:	e2 f7       	brpl	.-8      	; 0x542 <PIN_WRITE+0xd2>
 54a:	83 2b       	or	r24, r19
 54c:	85 bb       	out	0x15, r24	; 21
			break;
 54e:	08 95       	ret
			default:
			break;
		}
		break;
		case 3:
		switch(state){
 550:	66 23       	and	r22, r22
 552:	19 f0       	breq	.+6      	; 0x55a <PIN_WRITE+0xea>
 554:	61 30       	cpi	r22, 0x01	; 1
 556:	69 f0       	breq	.+26     	; 0x572 <PIN_WRITE+0x102>
 558:	08 95       	ret
			case LOW:
			CLR_BIT(PORTD,pin);
 55a:	32 b3       	in	r19, 0x12	; 18
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <PIN_WRITE+0xf6>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	2a 95       	dec	r18
 568:	e2 f7       	brpl	.-8      	; 0x562 <PIN_WRITE+0xf2>
 56a:	80 95       	com	r24
 56c:	83 23       	and	r24, r19
 56e:	82 bb       	out	0x12, r24	; 18
			break;
 570:	08 95       	ret
			case HIGH:
			SET_BIT(PORTD,pin);
 572:	32 b3       	in	r19, 0x12	; 18
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <PIN_WRITE+0x10e>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	2a 95       	dec	r18
 580:	e2 f7       	brpl	.-8      	; 0x57a <PIN_WRITE+0x10a>
 582:	83 2b       	or	r24, r19
 584:	82 bb       	out	0x12, r24	; 18
 586:	08 95       	ret

00000588 <PIN_READ>:
		break;
	}
}

u8 PIN_READ(u8 x){
	u8 pin  = x % 10;
 588:	9d ec       	ldi	r25, 0xCD	; 205
 58a:	89 9f       	mul	r24, r25
 58c:	91 2d       	mov	r25, r1
 58e:	11 24       	eor	r1, r1
 590:	29 2f       	mov	r18, r25
 592:	26 95       	lsr	r18
 594:	26 95       	lsr	r18
 596:	26 95       	lsr	r18
 598:	22 0f       	add	r18, r18
 59a:	32 2f       	mov	r19, r18
 59c:	33 0f       	add	r19, r19
 59e:	33 0f       	add	r19, r19
 5a0:	23 0f       	add	r18, r19
 5a2:	82 1b       	sub	r24, r18
 5a4:	28 2f       	mov	r18, r24
	u8 port = x / 10;
 5a6:	89 2f       	mov	r24, r25
 5a8:	86 95       	lsr	r24
 5aa:	86 95       	lsr	r24
 5ac:	86 95       	lsr	r24
	u8 reading = 0;
	switch(port){
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <PIN_READ+0x48>
 5b2:	28 f0       	brcs	.+10     	; 0x5be <PIN_READ+0x36>
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	a9 f0       	breq	.+42     	; 0x5e2 <PIN_READ+0x5a>
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	e1 f0       	breq	.+56     	; 0x5f4 <PIN_READ+0x6c>
 5bc:	24 c0       	rjmp	.+72     	; 0x606 <PIN_READ+0x7e>
		case 0:
		reading = GET_BIT(PINA,pin);
 5be:	89 b3       	in	r24, 0x19	; 25
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <PIN_READ+0x40>
 5c4:	95 95       	asr	r25
 5c6:	87 95       	ror	r24
 5c8:	2a 95       	dec	r18
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <PIN_READ+0x3c>
 5cc:	81 70       	andi	r24, 0x01	; 1
		break;
 5ce:	08 95       	ret
		case 1:
		reading = GET_BIT(PINB,pin);
 5d0:	86 b3       	in	r24, 0x16	; 22
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <PIN_READ+0x52>
 5d6:	95 95       	asr	r25
 5d8:	87 95       	ror	r24
 5da:	2a 95       	dec	r18
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <PIN_READ+0x4e>
 5de:	81 70       	andi	r24, 0x01	; 1
		break;
 5e0:	08 95       	ret
		case 2:
		reading = GET_BIT(PINC,pin);
 5e2:	83 b3       	in	r24, 0x13	; 19
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <PIN_READ+0x64>
 5e8:	95 95       	asr	r25
 5ea:	87 95       	ror	r24
 5ec:	2a 95       	dec	r18
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <PIN_READ+0x60>
 5f0:	81 70       	andi	r24, 0x01	; 1
		break;
 5f2:	08 95       	ret
		case 3:
		reading = GET_BIT(PIND,pin);
 5f4:	80 b3       	in	r24, 0x10	; 16
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <PIN_READ+0x76>
 5fa:	95 95       	asr	r25
 5fc:	87 95       	ror	r24
 5fe:	2a 95       	dec	r18
 600:	e2 f7       	brpl	.-8      	; 0x5fa <PIN_READ+0x72>
 602:	81 70       	andi	r24, 0x01	; 1
		break;
 604:	08 95       	ret
}

u8 PIN_READ(u8 x){
	u8 pin  = x % 10;
	u8 port = x / 10;
	u8 reading = 0;
 606:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return reading;
}
 608:	08 95       	ret

0000060a <__divsf3>:
 60a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3x>
 60e:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_round>
 612:	0e 94 31 04 	call	0x862	; 0x862 <__fp_pscB>
 616:	58 f0       	brcs	.+22     	; 0x62e <__divsf3+0x24>
 618:	0e 94 2a 04 	call	0x854	; 0x854 <__fp_pscA>
 61c:	40 f0       	brcs	.+16     	; 0x62e <__divsf3+0x24>
 61e:	29 f4       	brne	.+10     	; 0x62a <__divsf3+0x20>
 620:	5f 3f       	cpi	r21, 0xFF	; 255
 622:	29 f0       	breq	.+10     	; 0x62e <__divsf3+0x24>
 624:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_inf>
 628:	51 11       	cpse	r21, r1
 62a:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_szero>
 62e:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_nan>

00000632 <__divsf3x>:
 632:	0e 94 49 04 	call	0x892	; 0x892 <__fp_split3>
 636:	68 f3       	brcs	.-38     	; 0x612 <__divsf3+0x8>

00000638 <__divsf3_pse>:
 638:	99 23       	and	r25, r25
 63a:	b1 f3       	breq	.-20     	; 0x628 <__divsf3+0x1e>
 63c:	55 23       	and	r21, r21
 63e:	91 f3       	breq	.-28     	; 0x624 <__divsf3+0x1a>
 640:	95 1b       	sub	r25, r21
 642:	55 0b       	sbc	r21, r21
 644:	bb 27       	eor	r27, r27
 646:	aa 27       	eor	r26, r26
 648:	62 17       	cp	r22, r18
 64a:	73 07       	cpc	r23, r19
 64c:	84 07       	cpc	r24, r20
 64e:	38 f0       	brcs	.+14     	; 0x65e <__divsf3_pse+0x26>
 650:	9f 5f       	subi	r25, 0xFF	; 255
 652:	5f 4f       	sbci	r21, 0xFF	; 255
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	44 1f       	adc	r20, r20
 65a:	aa 1f       	adc	r26, r26
 65c:	a9 f3       	breq	.-22     	; 0x648 <__divsf3_pse+0x10>
 65e:	35 d0       	rcall	.+106    	; 0x6ca <__divsf3_pse+0x92>
 660:	0e 2e       	mov	r0, r30
 662:	3a f0       	brmi	.+14     	; 0x672 <__divsf3_pse+0x3a>
 664:	e0 e8       	ldi	r30, 0x80	; 128
 666:	32 d0       	rcall	.+100    	; 0x6cc <__divsf3_pse+0x94>
 668:	91 50       	subi	r25, 0x01	; 1
 66a:	50 40       	sbci	r21, 0x00	; 0
 66c:	e6 95       	lsr	r30
 66e:	00 1c       	adc	r0, r0
 670:	ca f7       	brpl	.-14     	; 0x664 <__divsf3_pse+0x2c>
 672:	2b d0       	rcall	.+86     	; 0x6ca <__divsf3_pse+0x92>
 674:	fe 2f       	mov	r31, r30
 676:	29 d0       	rcall	.+82     	; 0x6ca <__divsf3_pse+0x92>
 678:	66 0f       	add	r22, r22
 67a:	77 1f       	adc	r23, r23
 67c:	88 1f       	adc	r24, r24
 67e:	bb 1f       	adc	r27, r27
 680:	26 17       	cp	r18, r22
 682:	37 07       	cpc	r19, r23
 684:	48 07       	cpc	r20, r24
 686:	ab 07       	cpc	r26, r27
 688:	b0 e8       	ldi	r27, 0x80	; 128
 68a:	09 f0       	breq	.+2      	; 0x68e <__divsf3_pse+0x56>
 68c:	bb 0b       	sbc	r27, r27
 68e:	80 2d       	mov	r24, r0
 690:	bf 01       	movw	r22, r30
 692:	ff 27       	eor	r31, r31
 694:	93 58       	subi	r25, 0x83	; 131
 696:	5f 4f       	sbci	r21, 0xFF	; 255
 698:	3a f0       	brmi	.+14     	; 0x6a8 <__divsf3_pse+0x70>
 69a:	9e 3f       	cpi	r25, 0xFE	; 254
 69c:	51 05       	cpc	r21, r1
 69e:	78 f0       	brcs	.+30     	; 0x6be <__divsf3_pse+0x86>
 6a0:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_inf>
 6a4:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_szero>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	e4 f3       	brlt	.-8      	; 0x6a4 <__divsf3_pse+0x6c>
 6ac:	98 3e       	cpi	r25, 0xE8	; 232
 6ae:	d4 f3       	brlt	.-12     	; 0x6a4 <__divsf3_pse+0x6c>
 6b0:	86 95       	lsr	r24
 6b2:	77 95       	ror	r23
 6b4:	67 95       	ror	r22
 6b6:	b7 95       	ror	r27
 6b8:	f7 95       	ror	r31
 6ba:	9f 5f       	subi	r25, 0xFF	; 255
 6bc:	c9 f7       	brne	.-14     	; 0x6b0 <__divsf3_pse+0x78>
 6be:	88 0f       	add	r24, r24
 6c0:	91 1d       	adc	r25, r1
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	97 f9       	bld	r25, 7
 6c8:	08 95       	ret
 6ca:	e1 e0       	ldi	r30, 0x01	; 1
 6cc:	66 0f       	add	r22, r22
 6ce:	77 1f       	adc	r23, r23
 6d0:	88 1f       	adc	r24, r24
 6d2:	bb 1f       	adc	r27, r27
 6d4:	62 17       	cp	r22, r18
 6d6:	73 07       	cpc	r23, r19
 6d8:	84 07       	cpc	r24, r20
 6da:	ba 07       	cpc	r27, r26
 6dc:	20 f0       	brcs	.+8      	; 0x6e6 <__divsf3_pse+0xae>
 6de:	62 1b       	sub	r22, r18
 6e0:	73 0b       	sbc	r23, r19
 6e2:	84 0b       	sbc	r24, r20
 6e4:	ba 0b       	sbc	r27, r26
 6e6:	ee 1f       	adc	r30, r30
 6e8:	88 f7       	brcc	.-30     	; 0x6cc <__divsf3_pse+0x94>
 6ea:	e0 95       	com	r30
 6ec:	08 95       	ret

000006ee <__fixunssfsi>:
 6ee:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fp_splitA>
 6f2:	88 f0       	brcs	.+34     	; 0x716 <__fixunssfsi+0x28>
 6f4:	9f 57       	subi	r25, 0x7F	; 127
 6f6:	98 f0       	brcs	.+38     	; 0x71e <__fixunssfsi+0x30>
 6f8:	b9 2f       	mov	r27, r25
 6fa:	99 27       	eor	r25, r25
 6fc:	b7 51       	subi	r27, 0x17	; 23
 6fe:	b0 f0       	brcs	.+44     	; 0x72c <__fixunssfsi+0x3e>
 700:	e1 f0       	breq	.+56     	; 0x73a <__fixunssfsi+0x4c>
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	1a f0       	brmi	.+6      	; 0x712 <__fixunssfsi+0x24>
 70c:	ba 95       	dec	r27
 70e:	c9 f7       	brne	.-14     	; 0x702 <__fixunssfsi+0x14>
 710:	14 c0       	rjmp	.+40     	; 0x73a <__fixunssfsi+0x4c>
 712:	b1 30       	cpi	r27, 0x01	; 1
 714:	91 f0       	breq	.+36     	; 0x73a <__fixunssfsi+0x4c>
 716:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_zero>
 71a:	b1 e0       	ldi	r27, 0x01	; 1
 71c:	08 95       	ret
 71e:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__fp_zero>
 722:	67 2f       	mov	r22, r23
 724:	78 2f       	mov	r23, r24
 726:	88 27       	eor	r24, r24
 728:	b8 5f       	subi	r27, 0xF8	; 248
 72a:	39 f0       	breq	.+14     	; 0x73a <__fixunssfsi+0x4c>
 72c:	b9 3f       	cpi	r27, 0xF9	; 249
 72e:	cc f3       	brlt	.-14     	; 0x722 <__fixunssfsi+0x34>
 730:	86 95       	lsr	r24
 732:	77 95       	ror	r23
 734:	67 95       	ror	r22
 736:	b3 95       	inc	r27
 738:	d9 f7       	brne	.-10     	; 0x730 <__fixunssfsi+0x42>
 73a:	3e f4       	brtc	.+14     	; 0x74a <__fixunssfsi+0x5c>
 73c:	90 95       	com	r25
 73e:	80 95       	com	r24
 740:	70 95       	com	r23
 742:	61 95       	neg	r22
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	8f 4f       	sbci	r24, 0xFF	; 255
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__floatunsisf>:
 74c:	e8 94       	clt
 74e:	09 c0       	rjmp	.+18     	; 0x762 <__floatsisf+0x12>

00000750 <__floatsisf>:
 750:	97 fb       	bst	r25, 7
 752:	3e f4       	brtc	.+14     	; 0x762 <__floatsisf+0x12>
 754:	90 95       	com	r25
 756:	80 95       	com	r24
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	99 23       	and	r25, r25
 764:	a9 f0       	breq	.+42     	; 0x790 <__floatsisf+0x40>
 766:	f9 2f       	mov	r31, r25
 768:	96 e9       	ldi	r25, 0x96	; 150
 76a:	bb 27       	eor	r27, r27
 76c:	93 95       	inc	r25
 76e:	f6 95       	lsr	r31
 770:	87 95       	ror	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b7 95       	ror	r27
 778:	f1 11       	cpse	r31, r1
 77a:	f8 cf       	rjmp	.-16     	; 0x76c <__floatsisf+0x1c>
 77c:	fa f4       	brpl	.+62     	; 0x7bc <__floatsisf+0x6c>
 77e:	bb 0f       	add	r27, r27
 780:	11 f4       	brne	.+4      	; 0x786 <__floatsisf+0x36>
 782:	60 ff       	sbrs	r22, 0
 784:	1b c0       	rjmp	.+54     	; 0x7bc <__floatsisf+0x6c>
 786:	6f 5f       	subi	r22, 0xFF	; 255
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	16 c0       	rjmp	.+44     	; 0x7bc <__floatsisf+0x6c>
 790:	88 23       	and	r24, r24
 792:	11 f0       	breq	.+4      	; 0x798 <__floatsisf+0x48>
 794:	96 e9       	ldi	r25, 0x96	; 150
 796:	11 c0       	rjmp	.+34     	; 0x7ba <__floatsisf+0x6a>
 798:	77 23       	and	r23, r23
 79a:	21 f0       	breq	.+8      	; 0x7a4 <__floatsisf+0x54>
 79c:	9e e8       	ldi	r25, 0x8E	; 142
 79e:	87 2f       	mov	r24, r23
 7a0:	76 2f       	mov	r23, r22
 7a2:	05 c0       	rjmp	.+10     	; 0x7ae <__floatsisf+0x5e>
 7a4:	66 23       	and	r22, r22
 7a6:	71 f0       	breq	.+28     	; 0x7c4 <__floatsisf+0x74>
 7a8:	96 e8       	ldi	r25, 0x86	; 134
 7aa:	86 2f       	mov	r24, r22
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	2a f0       	brmi	.+10     	; 0x7bc <__floatsisf+0x6c>
 7b2:	9a 95       	dec	r25
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	da f7       	brpl	.-10     	; 0x7b2 <__floatsisf+0x62>
 7bc:	88 0f       	add	r24, r24
 7be:	96 95       	lsr	r25
 7c0:	87 95       	ror	r24
 7c2:	97 f9       	bld	r25, 7
 7c4:	08 95       	ret

000007c6 <__floatundisf>:
 7c6:	e8 94       	clt

000007c8 <__fp_di2sf>:
 7c8:	f9 2f       	mov	r31, r25
 7ca:	96 eb       	ldi	r25, 0xB6	; 182
 7cc:	ff 23       	and	r31, r31
 7ce:	81 f0       	breq	.+32     	; 0x7f0 <__fp_di2sf+0x28>
 7d0:	12 16       	cp	r1, r18
 7d2:	13 06       	cpc	r1, r19
 7d4:	14 06       	cpc	r1, r20
 7d6:	44 0b       	sbc	r20, r20
 7d8:	93 95       	inc	r25
 7da:	f6 95       	lsr	r31
 7dc:	87 95       	ror	r24
 7de:	77 95       	ror	r23
 7e0:	67 95       	ror	r22
 7e2:	57 95       	ror	r21
 7e4:	40 40       	sbci	r20, 0x00	; 0
 7e6:	ff 23       	and	r31, r31
 7e8:	b9 f7       	brne	.-18     	; 0x7d8 <__fp_di2sf+0x10>
 7ea:	1b c0       	rjmp	.+54     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7ec:	99 27       	eor	r25, r25
 7ee:	08 95       	ret
 7f0:	88 23       	and	r24, r24
 7f2:	51 f4       	brne	.+20     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f4:	98 50       	subi	r25, 0x08	; 8
 7f6:	d2 f7       	brpl	.-12     	; 0x7ec <__fp_di2sf+0x24>
 7f8:	87 2b       	or	r24, r23
 7fa:	76 2f       	mov	r23, r22
 7fc:	65 2f       	mov	r22, r21
 7fe:	54 2f       	mov	r21, r20
 800:	43 2f       	mov	r20, r19
 802:	32 2f       	mov	r19, r18
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	b1 f3       	breq	.-20     	; 0x7f4 <__fp_di2sf+0x2c>
 808:	12 16       	cp	r1, r18
 80a:	13 06       	cpc	r1, r19
 80c:	14 06       	cpc	r1, r20
 80e:	44 0b       	sbc	r20, r20
 810:	88 23       	and	r24, r24
 812:	3a f0       	brmi	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 814:	9a 95       	dec	r25
 816:	44 0f       	add	r20, r20
 818:	55 1f       	adc	r21, r21
 81a:	66 1f       	adc	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	ca f7       	brpl	.-14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 822:	55 23       	and	r21, r21
 824:	4a f4       	brpl	.+18     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 826:	44 0f       	add	r20, r20
 828:	55 1f       	adc	r21, r21
 82a:	11 f4       	brne	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	60 ff       	sbrs	r22, 0
 82e:	04 c0       	rjmp	.+8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 830:	6f 5f       	subi	r22, 0xFF	; 255
 832:	7f 4f       	sbci	r23, 0xFF	; 255
 834:	8f 4f       	sbci	r24, 0xFF	; 255
 836:	9f 4f       	sbci	r25, 0xFF	; 255
 838:	88 0f       	add	r24, r24
 83a:	96 95       	lsr	r25
 83c:	87 95       	ror	r24
 83e:	97 f9       	bld	r25, 7
 840:	08 95       	ret

00000842 <__fp_inf>:
 842:	97 f9       	bld	r25, 7
 844:	9f 67       	ori	r25, 0x7F	; 127
 846:	80 e8       	ldi	r24, 0x80	; 128
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	08 95       	ret

0000084e <__fp_nan>:
 84e:	9f ef       	ldi	r25, 0xFF	; 255
 850:	80 ec       	ldi	r24, 0xC0	; 192
 852:	08 95       	ret

00000854 <__fp_pscA>:
 854:	00 24       	eor	r0, r0
 856:	0a 94       	dec	r0
 858:	16 16       	cp	r1, r22
 85a:	17 06       	cpc	r1, r23
 85c:	18 06       	cpc	r1, r24
 85e:	09 06       	cpc	r0, r25
 860:	08 95       	ret

00000862 <__fp_pscB>:
 862:	00 24       	eor	r0, r0
 864:	0a 94       	dec	r0
 866:	12 16       	cp	r1, r18
 868:	13 06       	cpc	r1, r19
 86a:	14 06       	cpc	r1, r20
 86c:	05 06       	cpc	r0, r21
 86e:	08 95       	ret

00000870 <__fp_round>:
 870:	09 2e       	mov	r0, r25
 872:	03 94       	inc	r0
 874:	00 0c       	add	r0, r0
 876:	11 f4       	brne	.+4      	; 0x87c <__fp_round+0xc>
 878:	88 23       	and	r24, r24
 87a:	52 f0       	brmi	.+20     	; 0x890 <__fp_round+0x20>
 87c:	bb 0f       	add	r27, r27
 87e:	40 f4       	brcc	.+16     	; 0x890 <__fp_round+0x20>
 880:	bf 2b       	or	r27, r31
 882:	11 f4       	brne	.+4      	; 0x888 <__fp_round+0x18>
 884:	60 ff       	sbrs	r22, 0
 886:	04 c0       	rjmp	.+8      	; 0x890 <__fp_round+0x20>
 888:	6f 5f       	subi	r22, 0xFF	; 255
 88a:	7f 4f       	sbci	r23, 0xFF	; 255
 88c:	8f 4f       	sbci	r24, 0xFF	; 255
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	08 95       	ret

00000892 <__fp_split3>:
 892:	57 fd       	sbrc	r21, 7
 894:	90 58       	subi	r25, 0x80	; 128
 896:	44 0f       	add	r20, r20
 898:	55 1f       	adc	r21, r21
 89a:	59 f0       	breq	.+22     	; 0x8b2 <__fp_splitA+0x10>
 89c:	5f 3f       	cpi	r21, 0xFF	; 255
 89e:	71 f0       	breq	.+28     	; 0x8bc <__fp_splitA+0x1a>
 8a0:	47 95       	ror	r20

000008a2 <__fp_splitA>:
 8a2:	88 0f       	add	r24, r24
 8a4:	97 fb       	bst	r25, 7
 8a6:	99 1f       	adc	r25, r25
 8a8:	61 f0       	breq	.+24     	; 0x8c2 <__fp_splitA+0x20>
 8aa:	9f 3f       	cpi	r25, 0xFF	; 255
 8ac:	79 f0       	breq	.+30     	; 0x8cc <__fp_splitA+0x2a>
 8ae:	87 95       	ror	r24
 8b0:	08 95       	ret
 8b2:	12 16       	cp	r1, r18
 8b4:	13 06       	cpc	r1, r19
 8b6:	14 06       	cpc	r1, r20
 8b8:	55 1f       	adc	r21, r21
 8ba:	f2 cf       	rjmp	.-28     	; 0x8a0 <__fp_split3+0xe>
 8bc:	46 95       	lsr	r20
 8be:	f1 df       	rcall	.-30     	; 0x8a2 <__fp_splitA>
 8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <__fp_splitA+0x30>
 8c2:	16 16       	cp	r1, r22
 8c4:	17 06       	cpc	r1, r23
 8c6:	18 06       	cpc	r1, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	f1 cf       	rjmp	.-30     	; 0x8ae <__fp_splitA+0xc>
 8cc:	86 95       	lsr	r24
 8ce:	71 05       	cpc	r23, r1
 8d0:	61 05       	cpc	r22, r1
 8d2:	08 94       	sec
 8d4:	08 95       	ret

000008d6 <__fp_zero>:
 8d6:	e8 94       	clt

000008d8 <__fp_szero>:
 8d8:	bb 27       	eor	r27, r27
 8da:	66 27       	eor	r22, r22
 8dc:	77 27       	eor	r23, r23
 8de:	cb 01       	movw	r24, r22
 8e0:	97 f9       	bld	r25, 7
 8e2:	08 95       	ret

000008e4 <__mulsf3>:
 8e4:	0e 94 85 04 	call	0x90a	; 0x90a <__mulsf3x>
 8e8:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_round>
 8ec:	0e 94 2a 04 	call	0x854	; 0x854 <__fp_pscA>
 8f0:	38 f0       	brcs	.+14     	; 0x900 <__mulsf3+0x1c>
 8f2:	0e 94 31 04 	call	0x862	; 0x862 <__fp_pscB>
 8f6:	20 f0       	brcs	.+8      	; 0x900 <__mulsf3+0x1c>
 8f8:	95 23       	and	r25, r21
 8fa:	11 f0       	breq	.+4      	; 0x900 <__mulsf3+0x1c>
 8fc:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_inf>
 900:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_nan>
 904:	11 24       	eor	r1, r1
 906:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_szero>

0000090a <__mulsf3x>:
 90a:	0e 94 49 04 	call	0x892	; 0x892 <__fp_split3>
 90e:	70 f3       	brcs	.-36     	; 0x8ec <__mulsf3+0x8>

00000910 <__mulsf3_pse>:
 910:	95 9f       	mul	r25, r21
 912:	c1 f3       	breq	.-16     	; 0x904 <__mulsf3+0x20>
 914:	95 0f       	add	r25, r21
 916:	50 e0       	ldi	r21, 0x00	; 0
 918:	55 1f       	adc	r21, r21
 91a:	62 9f       	mul	r22, r18
 91c:	f0 01       	movw	r30, r0
 91e:	72 9f       	mul	r23, r18
 920:	bb 27       	eor	r27, r27
 922:	f0 0d       	add	r31, r0
 924:	b1 1d       	adc	r27, r1
 926:	63 9f       	mul	r22, r19
 928:	aa 27       	eor	r26, r26
 92a:	f0 0d       	add	r31, r0
 92c:	b1 1d       	adc	r27, r1
 92e:	aa 1f       	adc	r26, r26
 930:	64 9f       	mul	r22, r20
 932:	66 27       	eor	r22, r22
 934:	b0 0d       	add	r27, r0
 936:	a1 1d       	adc	r26, r1
 938:	66 1f       	adc	r22, r22
 93a:	82 9f       	mul	r24, r18
 93c:	22 27       	eor	r18, r18
 93e:	b0 0d       	add	r27, r0
 940:	a1 1d       	adc	r26, r1
 942:	62 1f       	adc	r22, r18
 944:	73 9f       	mul	r23, r19
 946:	b0 0d       	add	r27, r0
 948:	a1 1d       	adc	r26, r1
 94a:	62 1f       	adc	r22, r18
 94c:	83 9f       	mul	r24, r19
 94e:	a0 0d       	add	r26, r0
 950:	61 1d       	adc	r22, r1
 952:	22 1f       	adc	r18, r18
 954:	74 9f       	mul	r23, r20
 956:	33 27       	eor	r19, r19
 958:	a0 0d       	add	r26, r0
 95a:	61 1d       	adc	r22, r1
 95c:	23 1f       	adc	r18, r19
 95e:	84 9f       	mul	r24, r20
 960:	60 0d       	add	r22, r0
 962:	21 1d       	adc	r18, r1
 964:	82 2f       	mov	r24, r18
 966:	76 2f       	mov	r23, r22
 968:	6a 2f       	mov	r22, r26
 96a:	11 24       	eor	r1, r1
 96c:	9f 57       	subi	r25, 0x7F	; 127
 96e:	50 40       	sbci	r21, 0x00	; 0
 970:	9a f0       	brmi	.+38     	; 0x998 <__mulsf3_pse+0x88>
 972:	f1 f0       	breq	.+60     	; 0x9b0 <__mulsf3_pse+0xa0>
 974:	88 23       	and	r24, r24
 976:	4a f0       	brmi	.+18     	; 0x98a <__mulsf3_pse+0x7a>
 978:	ee 0f       	add	r30, r30
 97a:	ff 1f       	adc	r31, r31
 97c:	bb 1f       	adc	r27, r27
 97e:	66 1f       	adc	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	91 50       	subi	r25, 0x01	; 1
 986:	50 40       	sbci	r21, 0x00	; 0
 988:	a9 f7       	brne	.-22     	; 0x974 <__mulsf3_pse+0x64>
 98a:	9e 3f       	cpi	r25, 0xFE	; 254
 98c:	51 05       	cpc	r21, r1
 98e:	80 f0       	brcs	.+32     	; 0x9b0 <__mulsf3_pse+0xa0>
 990:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_inf>
 994:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_szero>
 998:	5f 3f       	cpi	r21, 0xFF	; 255
 99a:	e4 f3       	brlt	.-8      	; 0x994 <__mulsf3_pse+0x84>
 99c:	98 3e       	cpi	r25, 0xE8	; 232
 99e:	d4 f3       	brlt	.-12     	; 0x994 <__mulsf3_pse+0x84>
 9a0:	86 95       	lsr	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	b7 95       	ror	r27
 9a8:	f7 95       	ror	r31
 9aa:	e7 95       	ror	r30
 9ac:	9f 5f       	subi	r25, 0xFF	; 255
 9ae:	c1 f7       	brne	.-16     	; 0x9a0 <__mulsf3_pse+0x90>
 9b0:	fe 2b       	or	r31, r30
 9b2:	88 0f       	add	r24, r24
 9b4:	91 1d       	adc	r25, r1
 9b6:	96 95       	lsr	r25
 9b8:	87 95       	ror	r24
 9ba:	97 f9       	bld	r25, 7
 9bc:	08 95       	ret

000009be <_exit>:
 9be:	f8 94       	cli

000009c0 <__stop_program>:
 9c0:	ff cf       	rjmp	.-2      	; 0x9c0 <__stop_program>
